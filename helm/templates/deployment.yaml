{{- $releaseName := .Release.Name -}}
{{- $chartName := include "layer-spec.name" . -}}
{{- $cloudProviderFlavor := include "layer-spec.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "layer-spec.cloudProviderDockerRegistryUrl" . -}}

{{- if .Values.enabled -}}

{{ $caSecretName := ternary .Values.authentication.ca.externalSecretName (printf "%s%s" .Release.Name "-root-ca") .Values.authentication.ca.useExternal }}
{{ $sslSecretName := ternary .Values.authentication.ssl.externalSecretName (printf "%s%s" .Release.Name "-open-ssl") .Values.authentication.ssl.useExternal }}
{{ $postgresSecretName := ternary .Values.postgresSecret.externalSecretName (printf "%s%s" .Release.Name "-postgres-secret") .Values.postgresSecret.useExternal }}

{{- if .Values.authentication.ca.enabled }}
{{- if and .Values.authentication.ca.useExternal (not .Values.authentication.ca.externalSecretName) }}
{{- fail "When using external ca secret the value for .Values.authentication.ca.externalSecretName should be set" }}
{{- end }}
{{- end }}

{{- if .Values.authentication.ssl.enabled }}
{{- if and .Values.authentication.ssl.useExternal (not .Values.authentication.ssl.externalSecretName) }}
{{- fail "When using external ssl secret the value for .Values.authentication.ssl.externalSecretName should be set" }}
{{- end }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $releaseName }}-{{ $chartName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "layer-spec.environment" . }}
    release: {{ $releaseName }}
    {{- include "layer-spec.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "layer-spec.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "layer-spec.selectorLabels" . | nindent 8 }}
      {{- if .Values.resetOnConfigChange }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- end }}
    spec:
      {{- if .Values.cloudProvider.imagePullSecretName }}
      imagePullSecrets:
        - name: {{ .Values.cloudProvider.imagePullSecretName | quote }}
      {{- end }}
      volumes:
        {{- if .Values.authentication.ca.enabled }}
        - name: root-ca
          secret:
            secretName: {{ $caSecretName }}
        {{- end }}
        {{- if .Values.authentication.ssl.enabled }}
        - name: open-ssl
          secret:
            secretName: {{ $sslSecretName }}
        {{- end }}
        {{- if .Values.env.db.sslEnabled }}
        - name: ca-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: caFile
                path: ca.pem
        - name: key-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: keyFile
                path: key.pem
        - name: cert-file
          secret:
            secretName: {{ $postgresSecretName }}
            items:
              - key: certFile
                path: cert.pem
      {{- end }}
      containers:
        - name: {{ $releaseName }}-{{ $chartName }}-deployment
          {{- with .Values.image }}
          {{- if ne $cloudProviderFlavor "minikube" }}
          image: {{ $cloudProviderDockerRegistryUrl }}/{{ .repository }}:{{ .tag }}
          {{- else }}
          image: {{ .repository }}:{{ .tag }}
          {{- end }}
          {{- end }}
          env:
            {{- if .Values.authentication.ca.enabled }}
            - name: REQUESTS_CA_BUNDLE
              value: '/usr/local/share/ca-certificates/ca.crt'
            - name: NODE_EXTRA_CA_CERTS
              value: "[/usr/local/share/ca-certificates/ca.crt]"
            {{- end }}
            - name: SERVER_PORT
              value: {{ .Values.env.targetPort | quote }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: password
            - name: DB_SSL_CA
              value: "/opt/certs/ca/ca.pem"
            - name: DB_SSL_KEY
              value: "/opt/certs/key/key.pem"
            - name: DB_SSL_CERT
              value: "/opt/certs/cert/cert.pem"
          envFrom:
            - configMapRef:
                name: {{ $releaseName }}-{{ $chartName }}-configmap
          ports:
            - name: http
              containerPort: {{ .Values.env.targetPort }}
              protocol: {{ .Values.env.protocol }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            httpGet:
              path: /liveness
              port: http
          volumeMounts: 
            {{- if .Values.authentication.ca.enabled }}
            - name: root-ca
              mountPath: "/usr/local/share/ca-certificates"
            {{- end }}
            {{- if .Values.authentication.ssl.enabled }}
            - name: open-ssl
              mountPath: "/etc/ssl/openssl.cnf"
              subPath: "openssl.cnf"
            {{- end }}
            {{- if .Values.env.db.sslEnabled }}
            - name: ca-file
              mountPath: /opt/certs/ca/ca.pem
            - name: key-file
              mountPath: /opt/certs/key/key.pem
            - name: cert-file
              mountPath: /opt/certs/cert/cert.pem
          {{- end }}
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
{{- end -}}
